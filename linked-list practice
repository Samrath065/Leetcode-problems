#include<stdio.h>
#include<stdlib.h>
struct node{
	int data;
	struct node*next;
};
struct node*ptr;
void linkedlisttraversal(struct node*ptr){
	while(ptr!=NULL){
	
	printf("%d",ptr->data);
	ptr=ptr->next;
}
}
struct node*insertatbegin(struct node*head,int data){
	struct node*ptr=(struct node*)malloc(sizeof(struct node));
	ptr->next=head;
	ptr->data=data;
	return ptr;
	
}
struct node*insertatindex(struct node*head,int data,int index){
	struct node*ptr=(struct node*)malloc(sizeof(struct node));
	struct node*p=head;
	int i;
	while(i!=index-1){
		p=p->next;
		
	}
	i++;
	ptr->data=data;
	ptr->next=p->next;
	p->next=ptr;
	return head;
	
}
struct node*insertatend(struct node*head,int data){
	struct node*ptr=(struct node*)malloc(sizeof(struct node));
	ptr->data=data;
	struct node*p=head;
	while(p->next!=NULL){
		p=p->next;
	}
	p->next=ptr;
	ptr->next=NULL;
	return head;
}
struct node*insertafter(struct node*head,struct node*prevnode,int data){
	struct node*ptr=(struct node*)malloc(sizeof(struct node));
	ptr->data=data;
	ptr->next=prevnode->next;
	prevnode=ptr->next;
	return head;
}
int main(){
	struct node*head,*second,*third;
	// allocation of memory for nodes in heap
	head=(struct node*)malloc(sizeof(struct node));
	second=(struct node*)malloc(sizeof(struct node));
	third=(struct node*)malloc(sizeof(struct node));
	head->data=10;
	head->next=second;
	second->data=11;
	second->next=third;
	third->data=12;
	third->next=NULL;
	
	//linkedlisttraversal(head);
	 //head=insertatbegin(head,56);
	// linkedlisttraversal(head);
	// insertatindex(head,56,2);
	// linkedlisttraversal(head);
	 //insertatend(head,64);
	 //linkedlisttraversal(head);
	 head=insertafter(head,first,45);
	 linkedlisttraversal(head);	 
	
}
